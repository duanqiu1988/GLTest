struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

struct Light {
    vec3 direction;
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float cutOff;
    float constant;
    float linear;
    float quadratic;
};

varying vec3 Normal;
varying vec3 FragPos;
varying vec2 TexCoord;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main() {

    vec3 lightDir = normalize(light.position - FragPos);
    float theta = dot(lightDir, normalize(-light.direction));

    if (theta > light.cutOff) {
        // ambient
        vec3 ambient = light.ambient * vec3(texture2D(material.diffuse, TexCoord));

        // diffuse
        vec3 norm = normalize(Normal);
        float diff = max(dot(norm, lightDir), 0.0f);
        vec3 diffuse = light.diffuse * diff * vec3(texture2D(material.diffuse, TexCoord));

        // specular
        vec3 viewDir = normalize(viewPos - FragPos);
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
        vec3 specular = light.specular * spec * vec3(texture2D(material.specular, TexCoord));

        float distance = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

        //ambient *= attenuation;// Also remove attenuation from ambient, because if we move too far, the light in spotlight would then be darker than outside (since outside spotlight we have ambient lighting).
        diffuse *= attenuation;
        specular *= attenuation;

        vec3 result = ambient + diffuse + specular;
        gl_FragColor = vec4(result, 1.0f);
    } else {
        // ambient
        vec3 ambient = light.ambient * vec3(texture2D(material.diffuse, TexCoord));
        gl_FragColor = vec4(ambient, 1.0f);
    }
}